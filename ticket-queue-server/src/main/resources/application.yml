spring:
  profiles:
    active: local
  config:
    import: "optional:file:.env[.properties]"


logging:
  level:
    root: INFO
    io.opentelemetry: DEBUG


kafka:
  admin:
    properties:
      bootstrap.servers: kafka:9092
  topic-config:
    waiting:
      name : waiting-topic
      partitions: 3
      replicas: 1

  producer:
    bootstrap-servers: kafka:9092
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    retry: 2

  consumer:
    waiting-group:
      bootstrap-servers: kafka:9092
      group-id: waiting-group
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

  listener:
    missing-topics-fatal: false
    ack-mode: manual

redis:
  queue:
    host: redis
    port: 6379

  cache:
    host: redis
    port: 6380


management:
  metrics:
    export:
      otlp:
        enabled: true
        endpoint: http://otel-collector:4318
    enable:
      all: true
      jvm: true
  endpoints:
    web:
      exposure:
        include: "*"
    prometheus:
      enabled: true

otel:
  resource:
    attributes:
      service.name: ticket-service
  exporter:
    otlp:
      url: http://otel-collector:4317
      protocol: grpc