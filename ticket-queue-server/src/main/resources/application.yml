spring:
  profiles:
    active: local
  config:
    import: "optional:file:.env[.properties]"
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration

logging:
  level:
    root: INFO
    io.opentelemetry: DEBUG


kafka:
  admin:
    properties:
      bootstrap.servers: kafka:9092
  topic-config:
    queue-enqueue:
      name: queue-enqueue

  producer:
    bootstrap-servers: kafka:9092
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    retry: 2
    acks: 1                     # 빠른 응답을 위해 all → 1 로 변경
    retries: 0                 # 실패 시 재전송 안함 (속도 우선 시)
    batch-size: 65536          # 배치 크기 늘림
    linger-ms: 0               # 최대한 빨리 보내기
    buffer-memory: 67108864    # 버퍼 크기 증가
    compression-type: lz4      # 네트워크 효율 높이기
    max-in-flight-requests-per-connection: 10  # 병렬 전송 수 증가
    enable-idempotence: false  # 중복 방지 비활성화

  consumer:
    queue-enqueue:
      bootstrap-servers: kafka:9092
      group-id: queue-enqueue-group
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.StringDeserializer


  listener:
    missing-topics-fatal: false
    ack-mode: manual

redis:
  reservation: # 예약 서버와 함께 사용할 Redis
    host: reservation-redis
    port: 6380

  waiting-line: # 대기열에 순서를 관리할 Redis
    host: wating-line-redis
    port: 6379

management:
  metrics:
    export:
      otlp:
        enabled: true
        endpoint: http://otel-collector:4318
    enable:
      kafka: true
      all: true
      jvm: true
      reactor.netty: true
  endpoints:
    web:
      exposure:
        include: "*"
    prometheus:
      enabled: true

otel:
  resource:
    attributes:
      service.name: ticket-service
  exporter:
    otlp:
      url: http://otel-collector:4317
      protocol: grpc