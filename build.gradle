plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.cloud.tools.jib' version '3.3.1'
}

group = 'com.ticketon'
version = '0.0.1-SNAPSHOT'

configurations {
	agent
	compileOnly {
		extendsFrom annotationProcessor
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

bootRun {
	jvmArgs = [
			"-javaagent:${buildDir}/agent/opentelemetry-javaagent.jar",
			"-Dotel.metrics.exporter=otlp",
			"-Dotel.exporter.otlp.endpoint=http://otel-collector:4318/v1/metrics",
			"-Dotel.exporter.otlp.protocol=http/protobuf",
			"-Dotel.instrumentation.runtime-metrics.enabled=true",
			"-Dotel.instrumentation.system-metrics.enabled=true",
			"-Dotel.instrumentation.micrometer.enabled=true",
			"-Dotel.resource.attributes=service.name=ticket-service",
			"-Dotel.metrics.export.interval=1000",
			"-Dotel.javaagent.debug=false",
			"-Dotel.logs.exporter=none",
			"-Dspring.main.allow-bean-definition-overriding=true"
	]
}

bootRun.dependsOn("copyAgent")

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'com.github.sinminseok:snail-catch:1.1.0'
	//Observability 관련 설정
	agent 'io.opentelemetry.javaagent:opentelemetry-javaagent:2.7.0'
	implementation 'io.lettuce:lettuce-core'
	implementation 'io.micrometer:micrometer-core'
	implementation 'io.opentelemetry:opentelemetry-api:1.50.0'
	implementation 'io.opentelemetry:opentelemetry-sdk:1.50.0'
	implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.50.0'
	implementation 'io.opentelemetry:opentelemetry-sdk-metrics:1.50.0'
	implementation 'io.micrometer:micrometer-registry-otlp'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'com.github.vertical-blank:sql-formatter:2.0.3'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	  implementation 'org.springframework.kafka:spring-kafka'
	//	implementation 'com.github.loki4j:loki-logback-appender:1.4.0'


	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.register("copyAgent", Copy) {
	from(configurations.agent)
	into(layout.buildDirectory.dir("agent"))
	rename { 'opentelemetry-javaagent.jar' }
}

jib {
	from {
		image = "eclipse-temurin:21-jdk"
		platforms {
			platform {
				architecture = "arm64"
				os = "linux"
			}
		}
	}
	extraDirectories {
		paths {
			path {
				setFrom(layout.buildDirectory.dir("agent"))
				into = "/otelagent"
			}
		}
	}
	container {
		mainClass = "com.huisam.orderapplication.OrderApplicationKt"
		jvmFlags = [
				"-javaagent:/otelagent/opentelemetry-javaagent.jar",
				"-Dotel.metrics.exporter=otlp",
				"-Dotel.exporter.otlp.endpoint=http://otel-collector:4318/v1/metrics",
				"-Dotel.exporter.otlp.protocol=http/protobuf",
				"-Dotel.instrumentation.runtime-metrics.enabled=true",
				"-Dotel.instrumentation.system-metrics.enabled=true",
				"-Dotel.instrumentation.micrometer.enabled=true",
				"-Dotel.resource.attributes=service.name=ticket-service",
				"-Dotel.metrics.export.interval=1000",
				"-Dotel.javaagent.debug=false",
				"-Dotel.logs.exporter=none",
				"-Dspring.main.allow-bean-definition-overriding=true"
		]
	}
}

jibDockerBuild.dependsOn("copyAgent")

test {
	useJUnitPlatform()
}
